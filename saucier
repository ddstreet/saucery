#!/usr/bin/python3

import argparse
import dateparser
import logging

from datetime import datetime

from saucery.saucier import Saucier


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', help='Alternate config file to use')
    parser.add_argument('--username', help='Username for server')
    parser.add_argument('--server', help='Server name')
    loglevel = parser.add_mutually_exclusive_group()
    loglevel.add_argument('-q', '--quiet', dest='loglevel', const=logging.WARNING,
                          action='store_const',
                          help='Suppress info messages')
    loglevel.add_argument('-v', '--verbose', dest='loglevel', const=logging.DEBUG,
                          action='store_const',
                          help='Show debug messages')
    loglevel.add_argument('--loglevel', help=argparse.SUPPRESS)
    parser.add_argument('-n', '--dry-run',
                        action='count',
                        help='Dry-run, do not perform actions (use twice to stop file logging also)')
    parser.add_argument('--max-age', help='Ignore sosreports older than this')
    action = parser.add_mutually_exclusive_group(required=True)
    action.add_argument('-l', '--list', action='store_true',
                        help='List sosreports')
    action.add_argument('-s', '--shop', action='store_true',
                        help='Shop for (download) new sosreports')
    action.add_argument('-j', '--json', action='store_true',
                        help='Rebuild the json index')
    action.add_argument('--extract',
                        help='Re-extract the specified sosreport')
    opts = parser.parse_args()

    logging.basicConfig(level=opts.loglevel or logging.INFO, format='%(message)s')
    logger = logging.getLogger()

    saucier = Saucier(opts.config, dry_run=opts.dry_run,
                      server=opts.server,
                      username=opts.username,
                      log_name='saucier')

    logger.debug(f'params: {vars(opts)}')

    if opts.json:
        saucier.create_json(saucier)
    elif opts.extract:
        sos = saucier.sosreport(opts.extract)
        if sos.exists():
            sos.extract(reextract=True)
        else:
            logger.error(f'Sosreport {opts.extract} not found.')
    elif opts.list:
        for s in saucier.sosreports:
            print(s)
    elif opts.shop:
        for s in saucier.browse(shelflife=opts.max_age):
            saucier.buy(s)
        saucier.create_json()


if __name__ == "__main__":
    main()
