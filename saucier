#!/usr/bin/python3

import argparse
import dateparser
import logging

from datetime import datetime

from saucery.saucier import Saucier



def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', help='Alternate config file to use')
    parser.add_argument('--username', help='Username for server')
    parser.add_argument('--server', help='Server name')
    loglevel = parser.add_mutually_exclusive_group()
    loglevel.add_argument('-q', '--quiet', dest='loglevel', const=logging.WARNING,
                          action='store_const',
                          help='Suppress info messages')
    loglevel.add_argument('-v', '--verbose', dest='loglevel', const=logging.DEBUG,
                          action='store_const',
                          help='Show debug messages')
    loglevel.add_argument('--loglevel', help=argparse.SUPPRESS)
    parser.add_argument('--log-sftp', action='store_true', help='Show the SFTP logs')
    parser.add_argument('-n', '--dry-run', action='store_true', help='Dry-run, do not perform actions')
    parser.add_argument('--max-age', help='Ignore sosreports older than this')
    action = parser.add_mutually_exclusive_group(required=True)
    action.add_argument('-l', '--list', action='store_true',
                        help='List new sosreports')
    action.add_argument('-s', '--shop', action='store_true',
                        help='Shop for (download) new sosreports')
    action.add_argument('-j', '--json', action='store_true',
                        help='Rebuild the json index')
    action.add_argument('--extract',
                        help='Re-extract the specified sosreport')
    opts = parser.parse_args()

    logging.basicConfig(level=opts.loglevel or logging.INFO, format='%(message)s')
    logger = logging.getLogger()

    if opts.dry_run:
        logger.info('DRY-RUN mode')

    saucier = Saucier(opts.config, dry_run=opts.dry_run,
                      server=opts.server,
                      username=opts.username,
                      log_sftp=opts.log_sftp)

    if opts.json:
        saucier.saucery.create_json()
        return

    if opts.extract:
        sos = saucier.sosreport(opts.extract)
        if sos.exists():
            sos.extract(reextract=True)
        else:
            logger.error(f'Sosreport {opts.extract} not found.')
        return

    max_age = None
    if opts.max_age:
        max_age = datetime.now() - dateparser.parse(opts.max_age + ' ago')

    for s in saucier.browse_grocery():
        if not max_age or max_age > saucier.grocery.age(s):
            if opts.list:
                print(s)
            elif opts.shop:
                saucier.buy(s)
            else:
                raise RuntimeError(f'Internal error')


if __name__ == "__main__":
    main()
