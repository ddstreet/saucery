#!/usr/bin/python3

import argparse
import dateparser
import logging

from datetime import datetime

from saucery.saucier import Saucier


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', help='Alternate config file to use')
    parser.add_argument('--username', help='Username for server')
    parser.add_argument('--server', help='Server name')
    loglevel = parser.add_mutually_exclusive_group()
    loglevel.add_argument('-q', '--quiet', dest='loglevel', const=logging.WARNING,
                          action='store_const',
                          help='Suppress info messages')
    loglevel.add_argument('-v', '--verbose', dest='loglevel', const=logging.DEBUG,
                          action='store_const',
                          help='Show debug messages')
    loglevel.add_argument('--loglevel', help=argparse.SUPPRESS)
    parser.add_argument('--logname', help=argparse.SUPPRESS)
    parser.add_argument('-n', '--dry-run',
                        action='count',
                        help='Dry-run, do not perform actions (use twice to stop file logging also)')
    parser.add_argument('--max-age', help='Ignore sosreports older than this')
    parser.add_argument('-E', '--extract', action='store_true', help='Extract the sosreport')
    parser.add_argument('-S', '--sear', action='store_true', help='Sear (run hotsos) on the sosreport')
    parser.add_argument('-J', '--json', action='store_true', help='Rebuild the json index')
    action = parser.add_mutually_exclusive_group()
    action.add_argument('-s', '--shop', action='store_true',
                        help='Shop for (download) new sosreports')
    action.add_argument('sosreport', nargs='*', default=[],
                        help='Re-extract and/or re-sear the specified sosreport')
    opts = parser.parse_args()

    logging.basicConfig(level=opts.loglevel or logging.INFO, format='%(message)s')
    logger = logging.getLogger()

    saucier = Saucier(opts.config, dry_run=opts.dry_run,
                      server=opts.server,
                      username=opts.username,
                      logname=opts.logname)

    logger.debug(f'params: {vars(opts)}')

    if opts.shop:
        for sos in saucier.browse(max_age=opts.max_age):
            saucier.buy(sos, extract=opts.extract, sear=opts.sear)
    else:
        if opts.sosreport:
            soses = []
            for s in opts.sosreport:
                try:
                    soses.append(saucier.sosreport(s))
                except ValueError as e:
                    logger.error(e)
            # Re-extract if individual sosreports specified
            reextract = True
        else:
            soses = saucier.sosreports
            # Don't re-extract *all* sosreports
            reextract = False
        for sos in soses:
            if sos.exists():
                logger.info(sos)
                if opts.extract:
                    sos.extract(reextract=reextract)
                if opts.sear:
                    sos.sear()
            else:
                logger.error(f'Sosreport {sos} not found.')
    if opts.json:
        saucier.create_json()


if __name__ == "__main__":
    main()
