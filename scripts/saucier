#!/usr/bin/python3

import argparse
import sys

from pathlib import Path

# if called from git source, add parent dir to python path
if Path(__file__).parent.name == 'scripts':
    sys.path.insert(0, str(Path(__file__).parent.parent))

from saucery.argparse import SauceryArgumentParser


def main():
    parser = SauceryArgumentParser()

    parser.add_argument('--force', action='store_true',
                        help='Re-extract or re-sear already processed sosreports')
    parser.add_argument('--threads',
                        default=0, type=int,
                        help='Run actions in this many threads (0: #cpus, default: 0)')
    parser.add_argument('-s', '--state', action='append',
                        help='Act on only sosreports in (any of) these state(s).')

    parser.add_argument('-a', '--show-analysis', action='store_true',
                        help='Show the analysis results')
    parser.add_argument('-E', '--extract', action='store_true',
                        help='Extract the sosreport')
    parser.add_argument('-S', '--squash', action='store_true',
                        help="Squash the extracted sosreport (requires 'mksquashfs')")
    parser.add_argument('-M', '--mount', action='store_true',
                        help="Mount the squashed sosreport (requires 'squashfuse')")
    parser.add_argument('--unmount', action='store_true',
                        help="Unmount the squashed sosreport")
    parser.add_argument('-A', '--analyse', action='store_true',
                        help='Analyse the extracted/mounted sosreport')
    parser.add_argument('-U', '--menu', action='store_true',
                        help='Update the menu with current sosreports')
    parser.add_argument('--umount', action='store_true', dest='unmount', help=argparse.SUPPRESS)
    parser.add_argument('--remove-invalid', action='store_true',
                        help='Remove invalid sosreports.')
    parser.action_attrs.extend(['show_analysis',
                                'extract', 'squash', 'analyse', 'menu',
                                'mount', 'unmount', 'remove_invalid'])

    parser.add_argument('sosreport', nargs='*', default=[],
                        help='Act on specific sosreports (implies --force)')

    opts = parser.parse_args()
    saucier = parser.saucery(opts).saucier

    sosreports = saucier.sosreports(opts.sosreport, opts.state)

    if not sosreports:
        print('No sosreports found.', file=sys.stderr)
        return

    if opts.threads == 0:
        parallel = True
    elif opts.threads == 1:
        parallel = False
    else:
        parallel = opts.threads

    if opts.has_action:
        try:
            saucier.process(sosreports,
                            force=opts.force or bool(opts.sosreport),
                            parallel=parallel,
                            extract=opts.extract,
                            squash=opts.squash,
                            mount=opts.mount,
                            analyse=opts.analyse,
                            update_menu=opts.menu,
                            remove_invalid=opts.remove_invalid)
            if opts.show_analysis:
                saucier.print_analysis(sosreports)
        finally:
            if opts.unmount:
                saucier.unmount(sosreports)
    else:
        saucier.print_sosreports(sosreports)


if __name__ == "__main__":
    main()
