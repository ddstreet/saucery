#!/usr/bin/python3

import argparse
import sys

from pathlib import Path

# if called from git source, add parent dir to python path
if Path(__file__).parent.name == 'scripts':
    sys.path.insert(0, str(Path(__file__).parent.parent))

from saucery import Saucier


def main(args=None):
    parser = argparse.ArgumentParser()
    parser.add_argument('--max-age', help='Ignore sosreports older than this')
    parser.add_argument('-E', '--extract', action='store_true', help='Extract the sosreport')
    parser.add_argument('-S', '--sear', action='store_true', help='Sear (process) the sosreport')
    parser.add_argument('-M', '--menu', action='store_true', help='Update the menu with current sosreports')
    actions = parser.add_mutually_exclusive_group()
    actions.add_argument('-s', '--shop', action='store_true',
                         help='Shop for (download) new sosreports')
    actions.add_argument('sosreport', nargs='*', default=[],
                         help='Re-extract and/or re-sear the specified sosreport(s)')
    (saucier, opts) = Saucier.parse(parser=parser, actions=actions, args=args)

    if opts.shop:
        sosreports = [saucier.buy(s) for s in saucier.browse(max_age=opts.max_age)]
    else:
        sosreports = opts.sosreport or saucier.sosreports

    # only force reextract/resear if specific sosreports specified
    force = bool(opts.sosreport)

    if opts.extract:
        saucier.extract(sosreports, reextract=force)
    if opts.sear:
        saucier.sear(sosreports, resear=force)
    if opts.menu:
        saucier.update_menu()


if __name__ == "__main__":
    main()
