#!/usr/bin/python3

import sys

from pathlib import Path

# if called from git source, add parent dir to python path
if Path(__file__).parent.name == 'scripts':
    sys.path.insert(0, str(Path(__file__).parent.parent))

from saucery.argparse import SauceryArgumentParser


def main():
    parser = SauceryArgumentParser()

    parser.add_argument('--force', action='store_true', help='Re-extract or re-sear already processed sosreports')
    parser.add_argument('--threads',
                        default=0, type=int,
                        help='Run actions in this many threads (0: #cpus, default: 0)')

    parser.add_argument('-E', '--extract', action='store_true', help='Extract the sosreport')
    parser.add_argument('-S', '--sear', action='store_true', help='Sear (process) the sosreport')
    parser.add_argument('-M', '--menu', action='store_true', help='Update the menu with current sosreports')
    parser.action_attrs.extend(['extract', 'sear', 'menu'])

    parser.add_argument('sosreport', nargs='*', default=[],
                        help='Act on specific sosreports (implies --force)')

    opts = parser.parse_args()
    saucier = parser.saucery(opts).saucier

    sosreports = opts.sosreport or saucier.sosreports

    if opts.threads == 0:
        parallel = True
    elif opts.threads == 1:
        parallel = False
    else:
        parallel = opts.threads

    saucier.cook(sosreports,
                 force=opts.force or bool(opts.sosreport),
                 parallel=parallel,
                 extract=opts.extract,
                 sear=opts.sear,
                 update_menu=opts.menu)

    if not opts.has_action:
        for sosreport in sosreports:
            print(sosreport)


if __name__ == "__main__":
    main()
