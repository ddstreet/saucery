#!/usr/bin/python3

import argparse
import sys

from pathlib import Path

# if called from git source, add parent dir to python path
if Path(__file__).parent.name == 'scripts':
    sys.path.insert(0, str(Path(__file__).parent.parent))

from saucery import Saucier


def main(args=None):
    parser = argparse.ArgumentParser()
    parser.add_argument('--max-age', help='When shopping, ignore sosreports older than this')
    parser.add_argument('-E', '--extract', action='store_true', help='Extract the sosreport')
    parser.add_argument('-S', '--sear', action='store_true', help='Sear (process) the sosreport')
    parser.add_argument('-M', '--menu', action='store_true', help='Update the menu with current sosreports')
    parser.add_argument('--force', action='store_true', help='Re-extract or re-sear already processed sosreports')
    parser.add_argument('--threads',
                        default=0, type=int,
                        help='Run actions in this many threads (0: #cpus, default: 0)')

    actions = parser.add_mutually_exclusive_group()
    actions.add_argument('-s', '--shop', action='store_true',
                         help='Shop for (download) new sosreports')
    actions.add_argument('sosreport', nargs='*', default=[],
                         help='Act on specific sosreports (implies --force)')
    (saucier, opts) = Saucier.parse(parser=parser, actions=actions, args=args)

    if opts.shop:
        sosreports = [saucier.buy(s) for s in saucier.browse(max_age=opts.max_age)]
    else:
        sosreports = opts.sosreport or saucier.sosreports

    if opts.threads == 0:
        parallel = True
    elif opts.threads == 1:
        parallel = False
    else:
        parallel = opts.threads

    saucier.cook(sosreports,
                 force=opts.force or bool(opts.sosreport),
                 parallel=parallel,
                 extract=opts.extract,
                 sear=opts.sear,
                 update_menu=opts.menu)

    if len(sys.argv) == 1:
        # with no params, default to listing
        for sosreport in sosreports:
            print(sosreport)


if __name__ == "__main__":
    main()
