#!/usr/bin/python3

import argparse
import configparser
import dateparser
import logging
import paramiko
import re
import subprocess
import sys

from datetime import datetime
from datetime import timezone
from functools import cached_property
from functools import lru_cache
from functools import partialmethod
from io import StringIO
from pathlib import Path
from progress.bar import Bar

# if called from git source, add parent dir to python path
if Path(__file__).parent.name == 'scripts':
    sys.path.insert(0, str(Path(__file__).parent.parent))

from saucery import Saucery


LOGGER = logging.getLogger(__name__)


class SaucerySFTPDownloader(object):
    CONFIGFILE = '~/.config/saucery/downloader.conf'
    CONFIGSECTION = 'sftp-downloader'
    DEFAULT_MAX_AGE = '1 day'

    def main(self):
        log_level = logging.DEBUG if self.verbose else logging.INFO
        logging.basicConfig(stream=sys.stdout, level=log_level, format='%(message)s')

        if not self.sftp_logging:
            logging.getLogger('paramiko').propagate = False

        if self.dump_config:
            self._dump_config()
            return

        if not self.regex:
            raise ValueError('Must provide some --regex path')

        self.saucery = Saucery()

        downloads = []
        for pattern in self.regex:
            LOGGER.debug(f"Checking pattern '{pattern}'")
            downloads.extend(self._find_downloads(Path(pattern).parts))
        downloads = list(filter(self._filter_downloads, downloads))
        total_downloads = len(downloads)
        total_bytes = sum([self._path_stat(d).st_size for d in downloads])
        (size, suffix) = self.scale_bytes(total_bytes)
        LOGGER.info(f'Found {total_downloads} sosreports to download ({size}{suffix})')
        count = 0
        for index, path in enumerate(downloads):
            self._download(path, index, total_downloads, count, total_bytes)
            count += self._path_stat(path).st_size

    def scale_bytes(self, size):
        for (power, suffix) in enumerate(['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']):
            div = pow(1024, power)
            if size < pow(1024, power+1):
                return (size//pow(1024, power), suffix)
        raise ValueError(f'size too large: {size}')

    @property
    def verbose(self):
        return self.config.get('verbose')

    @property
    def dry_run(self):
        return self.config.get('dry_run')

    @property
    def dump_config(self):
        return self.config.get('dump_config')

    @cached_property
    def configfile(self):
        parser = argparse.ArgumentParser(add_help=False)
        parser.add_argument('--configfile')
        (opts, _) = parser.parse_known_args()
        return Path(opts.configfile or self.CONFIGFILE).expanduser()

    @property
    def configsection(self):
        return self.CONFIGSECTION

    @property
    def server(self):
        return self.config.get('server')

    @property
    def username(self):
        return self.config.get('username')

    @property
    def max_age(self):
        return self.config.get('max_age')

    @property
    def regex(self):
        return self.config.get('regex')

    @property
    def get_case(self):
        return self.config.get('get_case')

    @property
    def get_customer(self):
        return self.config.get('get_customer')

    @cached_property
    def configparser(self):
        parser = configparser.ConfigParser()
        parser.add_section(self.configsection)
        parser.read(self.configfile)
        return parser

    def _dump_config(self):
        config = self.configparser[self.configsection]
        config['server'] = self.server
        config['username'] = self.username
        if self.max_age != self._parse_timedelta(self.DEFAULT_MAX_AGE):
            config['max_age'] = str(self.max_age)
        if self.regex:
            config['regex'] = '\n'.join(self.regex)
        if self.get_case:
            config['get_case'] = self.get_case
        if self.get_customer:
            config['get_customer'] = self.get_customer
        with StringIO() as f:
            self.configparser.write(f)
            LOGGER.info(f.getvalue())

    def _parse_timedelta(self, value, *, description=None):
        parsed = dateparser.parse(f'{value} ago')
        if parsed:
            LOGGER.debug(f"Parsed '{value}' as '{parsed}'")
        else:
            raise ValueError(f"Failed to parse %s'{value}'" %
                             (f'{description} ' if description else ''))
        return (datetime.now(timezone.utc).replace(microsecond=0) -
                parsed.astimezone(timezone.utc).replace(microsecond=0))

    @cached_property
    def config(self):
        config = self.configparser[self.configsection]
        server = config.get('server')
        username = config.get('username')
        max_age = config.get('max_age') or self.DEFAULT_MAX_AGE
        regex = config.get('regex', '').split()
        get_case = config.get('get_case')
        get_customer = config.get('get_customer')

        epilog = ('The --regex parameter will ignore default (configfile) regex; '
                  'use the --add-regex parameter to add additional patterns.')
        parser = argparse.ArgumentParser(epilog=epilog)
        parser.add_argument('-v', '--verbose', action='store_true',
                            help='Be verbose.')
        parser.add_argument('--sftp-logging', action='store_true',
                            help='Show SFTP logging.')
        parser.add_argument('-n', '--dry-run', action='store_true',
                            help="Dry-run mode.")
        parser.add_argument('--configfile',
                            help=f"Config file path (default: '{self.CONFIGFILE}').")
        parser.add_argument('--dump-config', action='store_true',
                            help=('Dump the configfile content, including any provided '
                                  'parameter settings, then exit without downloading. '
                                  'The output can be manually saved to the configfile.'))
        parser.add_argument('--get-case', default=get_case,
                            help=('Program to run to get the case number. '
                                  'The single parameter is the remote sosreport path.%s' %
                                  (f" (default: '{get_case}')" if get_case else '')))
        parser.add_argument('--get-customer', default=get_customer,
                            help=('Program to run to get the customer name. '
                                  'The single parameter is the remote sosreport path.%s' %
                                  (f" (default: '{get_customer}')" if get_customer else '')))
        parser.add_argument('-s', '--server', default=server, required=not server,
                            help=('SFTP server to connect to%s.' %
                                  (f" (default: '{server}')" if server else '')))
        parser.add_argument('-u', '--username', default=username, required=not username,
                            help=('Username to use with server%s.' %
                                  (f" (default: '{username}')" if username else '')))
        parser.add_argument('--max-age', default=max_age,
                            help=f"Max sosreport age to download (default '{max_age}').")
        parser.add_argument('-r', '--regex', action='append', default=[],
                            help=('File regex pattern(s) to use%s.' %
                                  (f" (default: '{','.join(regex)}')" if regex else '')))
        parser.add_argument('-R', '--add-regex', action='append', default=[],
                            help='File regex pattern(s) to use in addition to --regex patterns.')

        opts = parser.parse_args()

        max_age = self._parse_timedelta(opts.max_age, description='max age')

        regex = list(set(opts.regex or regex) | set(opts.add_regex))

        return {
            'verbose': opts.verbose,
            'sftp_logging': opts.sftp_logging,
            'dry_run': opts.dry_run,
            'dump_config': opts.dump_config,
            'get_case': opts.get_case,
            'get_customer': opts.get_customer,
            'server': opts.server,
            'username': opts.username,
            'max_age': max_age,
            'regex': regex,
        }

    @cached_property
    def sftp(self):
        client = paramiko.client.SSHClient()
        client.load_system_host_keys()
        client.connect(self.server, username=self.username,
                       disabled_algorithms={'pubkeys': ['rsa-sha2-256', 'rsa-sha2-512']})
        client.get_transport().set_keepalive(30)
        return client.open_sftp()

    @property
    def sftp_logging(self):
        return self.config.get('sftp_logging')

    def _find_downloads(self, parts, path=Path('.')):
        pattern = parts[0]
        remaining = parts[1:]
        for filename in self.sftp.listdir(path=str(path)):
            newpath = path / filename

            if not re.match(pattern, filename):
                LOGGER.debug(f'Ignoring path {newpath}')
                continue

            if remaining:
                LOGGER.info(f'Checking path {newpath}')
                yield from self._find_downloads(remaining, newpath)
                continue

            LOGGER.info(f'Adding file {newpath}')
            yield newpath

    @lru_cache(1000)
    def _path_stat(self, path):
        return self.sftp.stat(str(path))

    def _filter_downloads(self, path):
        try:
            sos = self.saucery.sosreport(path.name)
        except ValueError:
            LOGGER.error(f"Skipping sosreport with invalid name: '{path.name}'")
            return False
        if sos.exists():
            LOGGER.debug(f"Skipping already downloaded sosreport: '{path.name}'")
            return False
        stat = self._path_stat(path)
        age = datetime.now() - datetime.fromtimestamp(stat.st_mtime)
        if age > self.max_age:
            LOGGER.info(f"Ignoring sosreport with age '{age}': '{path.name}'")
            return False
        LOGGER.info(f"Including sosreport with age '{age}': '{path.name}'")
        return True

    def _download(self, path, index, total_downloads, count, total_bytes):
        sos = self.saucery.sosreport(path.name)
        LOGGER.debug(f"Downloading '{path}' to '{sos}'")
        if self.dry_run:
            return
        name = (path.name[:39] + '\u2026') if len(path.name) > 40 else path.name
        sosreport_size = self._path_stat(path).st_size
        (adjmax, adjmaxsuffix) = self.scale_bytes(sosreport_size)
        (adjtotalbytes, adjtotalbytessuffix) = self.scale_bytes(total_bytes)
        with Bar(name, max=sosreport_size) as bar:
            bar.suffix = (f'%(percent)d%% (%(adjindex)d%(adjindexsuffix)s/{adjmax}{adjmaxsuffix}) '
                          f'[{index+1}/{total_downloads}] '
                          f'(%(adjbytes)d%(adjbytessuffix)s/{adjtotalbytes}{adjtotalbytessuffix})')
            bar.adjindex = 0
            bar.adjindexsuffix = ''
            bar.adjbytes = 0
            bar.adjbytessuffix = ''
            last = [0]
            def callback(n, l):
                bar.next(n - l[0])
                l[0] = n
                (bar.adjindex, bar.adjindexsuffix) = self.scale_bytes(n)
                (bar.adjbytes, bar.adjbytessuffix) = self.scale_bytes(count + n)
            with sos.sosreport.open('wb') as dest:
                self.sftp.getfo(str(path), dest, callback=lambda n, _: callback(n, last))
        self._get_case(sos, path)
        self._get_customer(sos, path)

    def _get_field(self, name, sos, path):
        cmd = getattr(self, f'get_{name}', None)
        if not cmd:
            LOGGER.debug(f'No configured program to get {name}, skipping')
            return
        cmd = [cmd, str(path)]
        try:
            result = subprocess.run(cmd, encoding='utf-8',
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE)
        except subprocess.SubprocessError as e:
            LOGGER.error(f"Failed to get {name} for '{path}': {e}")
            return
        if result.returncode != 0:
            LOGGER.error(f"Failed to get {name} for '{path}'")
            if result.stderr.strip():
                LOGGER.error(result.stderr)
            return
        value = result.stdout.strip()
        LOGGER.debug(f"Using {name} '{value}' for '{path}'")
        setattr(sos, name, value)

    def _get_case(self, sos, path):
        self._get_field('case', sos, path)

    def _get_customer(self, sos, path):
        self._get_field('customer', sos, path)


if __name__ == '__main__':
    SaucerySFTPDownloader().main()
